{
  "examples" : [
    {
      "name" : "Список категорий",
      "states" : [
        "Вначале сформируем весь SQL код запроса на получение всего списка категорий.\n Выполним этот запрос и получим ресурс результата.",
        "Проверяем успешность выполнения. Получаем все категории в виде двухмерного массива.",
        "Получаем текст последней ошибки MySQL и показываем это на странице"
      ]
    },
    {
      "name" : "Список гифок",
      "states" : [
        "Формируем SQL запрос: получить гифки вместе с именем автора, сортируем по кол-ву просмотров и ограничиваем девятью штуками.",
        "Выполняем запрос и получаем ресурс результата, который передаем в шаблон главной страницы",
        "Подключаем шаблон для показа ошибки и передаем туда текст последней MySQL ошибки"
      ]
    },
    {
      "name" : "Поиск гифок",
      "states" : [
        "Получаем параметр запроса с поисковой строкой. Передаем его функции mysqli_real_escape_string, чтобы безопасно передать в SQL запрос",
        "Формируем SQL запрос на получение списка гифок с нестрогим поиском по названию или описанию",
        "Выполняем запрос и получаем ресурс результата, который передаем в шаблон главной страницы",
        "Подключаем шаблон для показа ошибки и передаем туда текст последней MySQL ошибки"
      ]
    },
    {
      "name" : "Страница показа гифки",
      "states" : [
        "Формируем SQL запрос на показ одной гифки по её идентификатору - первичному ключу.",
        "Выполняем запрос и проверяем кол-во результатов. Если результатов нет, то показываем ошибку 404",
        "Получаем результат запроса в виде обычного ассоциативного массива",
        "Формируем запрос на показ гифок из этой же категории.\n Результат запроса передаем в шаблон вместе с ассоциативным массивом самой гифки"
      ]
    },
    {
      "name" : "Добавление гифки",
      "states" : [
        "Формируем SQL запрос на добавление новой гифки. Обратите внимание, что на месте значений располагаются знаки вопроса - плейсхолдеры. Создаем на основе этого запроса подготовленное выражение",
        "Подставляем на место плейсхолдеров значения из ассоциативного массива гифки. Каждое значение будет преобразовано к указанному типу. Отправляем подготовленное выржение в MySQL",
        "Если запрос выполнен успешно, то получаем ID новой гифки и перенаправляем пользователя на страницу с её просмотром",
        "Иначе подключаем шаблон для показа ошибки и передаем туда текст последней MySQL ошибки"
      ]
    },
    {
      "name" : "Транзакции",
      "states" : [
        "Открываем новую транзакцию. Все следующие запросы будут частью этой транзакции",
        "Выполняем все необходимые запросы и сохраняем их результат",
        "Фиксируем транзакцию, если все запросы выполнились успешно",
        "Если хотя бы один запрос завершился ошибкой, то откатываем транзакцию",
        "Перенаправляем пользователя обратно на страницу просмотра гифки"
      ]
    },
    {
      "name" : "Кэширование",
      "states" : [
        "Функция для получения ключа. На основе SQL запроса, данных и тега возвращает ключ длиной в 64 символа",
        "Фунция для оохранения данных в кэше",
        "Функция инвалидации кеша. Ищет файлы кэша на основе переданного тега и данных. Найденные файлы удаляет",
        "Функция проверки кэша. Проверяет, что срок жизни файл кэша еще не истек. Если истек - удаляет",
        "Главная кэш-функция. Получает данные из БД или кэша. Если в кеше данных нет, то делает SQL запрос, а результат записывает в кэш и возвращает"
      ]
    },
    {
      "name" : "Постраничный вывод",
      "states" : [
        "Получаем текущую страницу. Определяем число гифок на странице",
        "Узнаем общее число гифок. Считаем кол-во страниц и смещение",
        "Заполняем массив номерами всех страниц",
        "Формируем запрос на показ списка гифок, учитывая смещение и число гифок на странице",
        "Передаем в шаблон полученные гифки и всю информацию для пагинации"
      ]
    },
    {
      "name" : "Объект для БД",
      "states" : [
        "Начинаем с определения свойств. Три приватных свойства объекта будут хранить: ресурс соединения, последнюю ошибку и последний результат",
        "Определяем специальный метод - конструктор. Этот метод вызывается автоматически в момент создания объекта. В нем выполняется подключение к БД и сохранение полученного ресурса в свойство",
        "Определим метод для выполнения запроса к БД. Он будет принимать SQL, выполнять запрос и сохранять результат или возможную ошибку во внутренних свойствах объекта",
        "Сделаем метод для получения из объекта последней ошибки. Если ошибок не было, то он вернет null",
        "Этот метод нужен, чтобы возвращать результат SELECT запросов в виде двумерного массива",
        "Два вспомогательных метода: для получения последнего вставленного ID и для количества строк в результате"
      ]
    },
    {
      "name" : "Работа с библиотеками",
      "states" : [
        "Определим свойства для хранения объектов библиотеки и имени гифки",
        "Добавим метод-конструктор, который будет заполнять свойства объектами библиотеки",
        "Создадим главный и единственный метод, который получит из гифки первый кадр и сохранит его отдельно",
        "Проверяем, что переданный путь содержит валидную гифку. Если так, то получаем из неё все кадры",
        "Выполняем всю оставшуюся работу: получаем первый кадр, создаем на его основе новую гифку и сохраняем её как новый файл"
      ]
    }
  ]
}