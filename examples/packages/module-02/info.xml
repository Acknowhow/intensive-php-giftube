<?xml version="1.0" encoding="utf-8"?>
<examples>
    <example name="Простые массивы" index="1">
        <description>to do</description>
        <files>
            <file name="array.php" main="false" show="true">
                <states>
                    <state>Массив можно создать двумя способами: объявить его пустым или сразу заполнить значениями.
                        Рассмотрим первый способ
                    </state>
                    <state>Чтобы сразу заполнить массив значениями, поместите их внутри литерала массива, разделив
                        запятыми
                    </state>
                    <state>Еще один не совсем обычный способ сделать массив - это сконвертировать в него строку со
                        значениями, разделенными специальным символом. Например, запятой
                    </state>
                    <state>Т.к. массив содержит список значений, его нельзя вывести на экран как простую переменную
                    </state>
                    <state>Чтобы узнать что содержится в массиве (для отладочных целей) можно воспользоваться функциями
                        var_dump или print_r
                    </state>
                    <state>Все значения массива можно преобразовать в строку, где эти значения будут разделены
                        специальным символом. Например, запятой
                    </state>
                    <state>Чтобы получить значение из массива необходимо указать его индекс. Индексация значения
                        начинается с нуля, т.е. индекс первого значения массива всегда будет равен нулю.
                    </state>
                    <state>Чтобы получить последнее значение, необходимо узнать его индекс. Для этого надо узнать общее
                        кол-во элементов и отнять единицу.
                    </state>
                    <state>Для добавления нового значения в конец массива используйте литерал 'пустые скобки'</state>
                    <state>Вы можете обновить любой элемент в массиве указав его индекс и присвоив новое значение
                    </state>
                    <state>Используйте функцию array_unshift, чтобы добавить новый элемент в начало массива</state>
                    <state>Для удаления элементов из массива существует функция unset, которой надо передавать индекс
                        удаляемого элемента
                    </state>
                    <state>Чтобы узнать, есть ли в массиве элемент с определенным индексом используйте функцию isset
                    </state>
                    <state>Для проверки существования значения в массиве используйте функцию in_array</state>
                    <state>Чтобы 'забрать' первый элемент массива существует функция array_shift. Она возвращает первый
                        элемент и одновременно удаляем его из массива
                    </state>
                    <state>Функция array_merge умеет объединять два массива в один</state>
                    <state>Элементы массива можно сортировать, т.е. менять их порядок. Например, можно отсортировать,
                        расположив элементы в алфавитном порядке их значений
                    </state>
                </states>
            </file>
            <file name="index.php" main="false" show="true">
                <states/>
            </file>
        </files>
    </example>
    <example name="Ассоциативные массивы" index="2">
        <description>to do</description>
        <files>
            <file name="array_assoc.php" main="false" show="true">
                <states>
                    <state>Добавлять новое значение в ассоциативный массив надо вместе с ключом. Если в массиве не было
                        такого ключа, то это значение добавится, а если было - заменится
                    </state>
                    <state>Прочитать значение из ассоциативного массива можно также как и из простого, только вместо
                        индекса используйте ключ
                    </state>
                    <state>Замена значений не отличается от добавления новых</state>
                    <state>Чтобы получить последнее значение из ассоциативного массива, надо вначале получить его ключи,
                        определить последний ключ и использовать его для получения значения
                    </state>
                </states>
            </file>
            <file name="index.php" main="false" show="true">
                <states/>
            </file>
        </files>
    </example>
    <example name="Двумерные массивы" index="3">
        <description>to do</description>
        <files>
            <file name="index.php" main="false" show="true">
                <states/>
            </file>
            <file name="two_array.php" main="false" show="true">
                <states/>
            </file>
        </files>
    </example>
    <example name="Циклы" index="4">
        <description>to do</description>
        <files>
            <file name="index.php" main="false" show="true">
                <states/>
            </file>
            <file name="loops.php" main="false" show="true">
                <states/>
            </file>
        </files>
    </example>
    <example name="Функции" index="5">
        <description>to do</description>
        <files>
            <file name="func.php" main="false" show="true">
                <states/>
            </file>
            <file name="index.php" main="false" show="true">
                <states/>
            </file>
        </files>
    </example>
</examples>
